from functools import reduce

print('\n1. Реализовать скрипт, в котором должна быть предусмотрена функция расчета заработной платы сотрудника. В расчете необходимо использовать формулу: (выработка в часах*ставка в час) + премия. Для выполнения расчета для конкретных значений необходимо запускать скрипт с параметрами.')


def selary():
    hour = float(input('Enter hour: '))
    fee = float(input('Enter fee per hour: '))
    bonus = 0
    if 40 < hour < 50:
        bonus = 10 * (fee * 0.2)
    elif 50 <= hour:
        bonus = 20 * (fee * 0.2)
    else:
        pass
    print(
        f'Зарплата сотрудника за месяц составила: {hour * fee + bonus}, в том числе:\n оклад: {hour * fee}\n премия: {bonus}')


selary()


print('\n2. Представлен список чисел. Необходимо вывести элементы исходного списка, значения которых больше предыдущего элемента. \nПодсказка: элементы, удовлетворяющие условию, оформить в виде списка. Для формирования списка использовать генератор.\nПример исходного списка: [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55].\nРезультат: [12, 44, 4, 10, 78, 123].')

my_list = [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55]
new_list = [my_list[i] for i in range(1, len(my_list)) if my_list[i] > my_list[i - 1]]
print(new_list)


print('\n3. Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21. Необходимо решить задание в одну строку. Подсказка: использовать функцию range() и генератор.')


my_list = [i for i in range(20, 240) if i % 20 == 0 or i % 21 == 0]
print(my_list)

print('\n4. Представлен список чисел. Определить элементы списка, не имеющие повторений. Сформировать итоговый массив чисел, соответствующих требованию. Элементы вывести в порядке их следования в исходном списке. Для выполнения задания обязательно использовать генератор.')

print('\nПример исходного списка: [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11].')
print('\nРезультат: [23, 1, 3, 10, 4, 11]')


my_list = [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11]
new_list = [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11]

for i in range(1, len(my_list)):
    if my_list[i] == my_list[i - 1]:
        new_list.pop(i)
        if my_list[i] == my_list[i - 1]:
            new_list.pop(i)
    continue
print(new_list)

print('\n5. Реализовать формирование списка, используя функцию range() и возможности генератора. В список должны войти четные числа от 100 до 1000 (включая границы). Необходимо получить результат вычисления произведения всех элементов списка. Подсказка: использовать функцию reduce().')


my_list = [i for i in range(100, 1001) if i % 2 == 0]
print(my_list)

print(f'Сумма всех чисел: ', reduce(lambda x,y: x + y, my_list))

print('\n6. Реализовать два небольших скрипта:\nа) итератор, генерирующий целые числа, начиная с указанного,\nб) итератор, повторяющий элементы некоторого списка, определенного заранее.\nПодсказка: использовать функцию count() и cycle() модуля itertools. Обратите внимание, что создаваемый цикл не должен быть бесконечным. Необходимо предусмотреть условие его завершения.\nНапример, в первом задании выводим целые числа, начиная с 3, а при достижении числа 10 завершаем цикл. Во втором также необходимо предусмотреть условие, при котором повторение элементов списка будет прекращено.')

from itertools import count, cycle, islice

numbers = [i for i in islice(count(3), 10)]
print(numbers)

mass = ['numbers', 'words', 'symbols']
c = 0
new_mass = []
for el in cycle(mass):
    c += 1
    new_mass.append(el)
    if c > 5:
        break
print(new_mass)

print('\n7. Реализовать генератор с помощью функции с ключевым словом yield, создающим очередное значение. При вызове функции должен создаваться объект-генератор. Функция должна вызываться следующим образом: for el in fact(n). Функция отвечает за получение факториала числа, а в цикле необходимо выводить только первые n чисел, начиная с 1! и до n!.')

from math import factorial

n = int(input("Введите целое число: "))

def number_fact(x):
    a = 1
    if x == 0:
        yield a
    else:
        for el in range(1, x + 1):
            a *= el
            yield a

for i, item in enumerate(number_fact(n), start=1):
    print(f'{i}! = {item}')

print(f'С помощью функции факториала: ', factorial(n))



